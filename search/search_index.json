{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Root page","text":""},{"location":"#links","title":"Links","text":"<ul> <li>Documentation site </li> <li>Jira</li> </ul>"},{"location":"Questions/","title":"Placeholder","text":""},{"location":"Questions/ansible/","title":"Placeholder","text":""},{"location":"Questions/aws/","title":"Placeholder","text":""},{"location":"Questions/k8s/","title":"Placeholder","text":""},{"location":"Questions/linux/","title":"Placeholder","text":""},{"location":"Questions/terraform/","title":"Placeholder","text":""},{"location":"learning/Linux/","title":"Index","text":"<ol> <li> <p>Server Mastery    The majority of servers out there run Linux. If you don't understand how to navigate the file system, manage processes, or configure services, you're missing a huge piece of the DevOps puzzle.</p> </li> <li> <p>Container Revolution    Docker and Kubernetes rely heavily on Linux concepts. Knowing containers under the hood means faster debugging, performance tuning, and smoother rollouts.</p> </li> <li> <p>Security &amp; Troubleshooting    Skills like configuring file permissions or leveraging tools like netstat and tcpdump help you spot vulnerabilities early and fix issues before they erupt into major incidents.</p> </li> <li> <p>Scripting Power    Bash and shell scripting let you automate mundane tasks\u2014freeing your time for more impactful, strategic work.</p> </li> </ol>"},{"location":"learning/Linux/advanced/","title":"Advanced","text":"<p>Focuses on system performance, security, networking, and automation.</p> <ol> <li>Linux Filesystem &amp; Storage Management    \u2022 LVM (Logical Volume Manager), RAID configurations, filesystem tuning (ext4, XFS, Btrfs), and quotas.</li> <li>Linux Networking Advanced Concepts    \u2022 IPTables, nftables, firewalld, network namespaces, VLANs, and advanced routing with iproute2.</li> <li>Process &amp; Resource Management    \u2022 Advanced process management (nice, renice, cgroups), system resource limits (ulimit), and troubleshooting    CPU/memory issues.</li> <li>Kernel Tuning &amp; Performance Optimization    \u2022 sysctl configurations, tuning kernel parameters, optimizing I/O performance, and NUMA balancing.</li> <li>System Security &amp; Hardening    \u2022 SELinux/AppArmor, Fail2ban, TCP Wrappers, securing SSH (key-based authentication, port hardening), auditing with    auditd.</li> <li>Linux Automation &amp; Scripting    \u2022 Advanced Bash scripting, system automation with Ansible/Puppet/Chef, cron jobs, and systemd timers.</li> <li>Log Management &amp; Analysis    \u2022 Centralized logging with rsyslog/journald, log rotation, log forwarding, and log analysis with ELK stack.</li> <li>Linux Containers &amp; Virtualization    \u2022 Deep dive into Docker, Podman, LXC/LXD, KVM/QEMU, and hypervisor performance tuning.</li> <li>High Availability &amp; Load Balancing    \u2022 Implementing HAProxy, keepalived, Corosync, and Pacemaker for redundancy and failover.</li> <li>Backup &amp; Disaster Recovery     Backup strategies (rsync, tar, Bacula, BorgBackup), disk imaging with dd/Clonezilla, and disaster recovery planning.</li> </ol>"},{"location":"learning/Linux/Networking/","title":"Placeholder","text":""},{"location":"learning/Linux/Process/","title":"Placeholder","text":""},{"location":"learning/aws/","title":"AWS Certification","text":"<p>Doc</p>"},{"location":"learning/aws/#exam-project-links","title":"Exam project links","text":"<p>https://cp.certmetrics.com/amazon/en/home/dashboard</p> <pre><code>flowchart TD\n    SolutionsArchitect-Associate --&gt;|1| SolutionsArchitect-Professional[SolutionsArchitect-Professional]\n    SolutionsArchitect-Associate --&gt;|1| DevOpsEngineer-Professional[DevOpsEngineer-Professional]\n    Developer-Associate --&gt;|1| DevOpsEngineer-Professional[DevOpsEngineer-Professional]\n    Developer-Associate --&gt;|1| DevOpsEngineer-Professional[DevOpsEngineer-Professional]\n    SysOpsAdministrator-Associate --&gt;|1| SecuritySpeciality[SecuritySpeciality]\n</code></pre>"},{"location":"learning/aws/#current-target","title":"Current Target","text":"<p>AWS Certified DevOps Engineer -Professional (DOP-C02)</p>"},{"location":"learning/aws/advanced/","title":"Advanced","text":"<p>Focuses on scaling, security, automation, and cost optimization.</p> <ol> <li>Advanced IAM &amp; Security Best Practices    \u2022 Implement IAM Policies with least privilege, AWS Organizations, SCPs, IAM Identity Center (SSO), and AWS IAM Access    Analyzer.</li> <li>AWS Networking: VPC Deep Dive    \u2022 Advanced VPC Peering, Transit Gateway, Direct Connect, PrivateLink, and hybrid cloud networking.</li> <li>AWS Compute Optimization    \u2022 EC2 Auto Scaling, EC2 Spot Instances, AWS Graviton, EC2 Savings Plans, and compute performance tuning.</li> <li>AWS Containers &amp; Orchestration    \u2022 Amazon ECS, EKS (Kubernetes), Fargate, Bottlerocket OS, and service mesh integration with App Mesh.</li> <li>AWS Serverless Advanced Concepts    \u2022 Lambda Layers, Step Functions, EventBridge, SQS FIFO, DLQ (Dead Letter Queue) handling, and performance tuning.</li> <li>AWS Storage &amp; Data Lifecycle Management    \u2022 S3 Intelligent-Tiering, S3 Lifecycle Policies, Glacier Deep Archive, AWS Backup, and EBS Snapshots.</li> <li>AWS Observability &amp; Monitoring    \u2022 CloudWatch Logs Insights, AWS X-Ray, AWS Distro for OpenTelemetry, and centralized logging with OpenSearch.</li> <li>AWS Cost Optimization Strategies    \u2022 Compute Savings Plans, AWS Cost Explorer, Reserved Instances, Spot Instances, and AWS Compute Optimizer.</li> <li>AWS CI/CD &amp; DevOps    \u2022 AWS CodePipeline, CodeBuild, CodeDeploy, CodeArtifact, GitOps with ArgoCD, and Jenkins on AWS.</li> <li>AWS Security &amp; Compliance     AWS Shield, AWS WAF, Inspector, Macie, Audit Manager, and security automation with Security Hub.</li> </ol>"},{"location":"learning/aws/expert/","title":"Expert","text":"<p>For mastering AWS at an enterprise scale, architecting globally distributed systems, and security compliance.</p> <ol> <li>AWS Multi-Account &amp; Enterprise Governance    \u2022 AWS Control Tower, AWS Organizations, SCPs, multi-account IAM strategy, and best practices for governance.</li> <li>AWS Global Networking &amp; Hybrid Cloud    \u2022 AWS Global Accelerator, Direct Connect, Transit Gateway with SD-WAN, and hybrid networking with AWS Outposts.</li> <li>AWS Kubernetes &amp; Microservices at Scale    \u2022 Advanced EKS networking (CNI deep dive), service mesh with Istio/App Mesh, and multi-cluster EKS deployment    strategies.</li> <li>AWS Infrastructure as Code (IaC) at Scale    \u2022 Terraform modules, AWS CDK, CloudFormation macros &amp; custom resources, and GitOps integration.</li> <li>AWS Data Engineering &amp; Big Data    \u2022 Redshift Spectrum, AWS Glue, Athena, Kinesis Data Streams, AWS Lake Formation, and cross-region data replication.</li> <li>AWS AI/ML &amp; MLOps    \u2022 SageMaker Pipelines, Data Wrangler, SageMaker Model Monitor, and deploying ML models with Lambda/ECS.</li> <li>AWS Disaster Recovery &amp; Resilience    Multi-region failover, AWS Backup, Route 53 failover policies, RTO/RPO best practices, and AWS Elastic Disaster    Recovery.</li> </ol>"},{"location":"learning/aws/Architecture/","title":"Placeholder","text":""},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/","title":"1 Intro","text":""},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#skill-builder-page","title":"Skill Builder page","text":"<p>https://skillbuilder.aws/exam-prep/solutions-architect-associate</p> <p>Overall 200+ services available on amazon . 26+ Regions Dedicated network circuit</p>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#shared-responsibility-model","title":"Shared responsibility model","text":""},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#iaas","title":"IaaS","text":"<ul> <li>S3 buckets , EC2 instances</li> <li>For VM - customer responsible for OS , patches etc`</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#paas","title":"PaaS","text":"<ul> <li>RDS - relational data services</li> <li>Configuration settings</li> <li>Serverless</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#saas","title":"SaaS","text":"<ul> <li>Customer deploys High-level software</li> <li>Limited configuration and settings</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#well-architected-framework","title":"Well architected framework","text":"<p>Six-pillars-based design</p>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#operational-excellence","title":"Operational excellence","text":"<ul> <li>Monitoring IT services deployed AWS services.</li> <li>Performance metrics via CloudWatch</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#security","title":"Security","text":"<ul> <li>Data confidentiality. Data at rest \\ transit</li> <li>Data integrity (cloud trail auditing)</li> <li>IAM Identity and access management , policies , threat detection</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#reliability","title":"Reliability","text":"<ul> <li>Distributed systems across regions ( S3 replication )</li> <li>DRP - disaster recovery plan</li> <li>Change when needed - auto-scaling</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#performance-efficiency","title":"Performance efficiency","text":"<ul> <li>Match service sizing to a business needs</li> <li>Monitor performance metrics and adjust</li> <li>See dashboard visualization</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#cost-optimization","title":"Cost optimization","text":"<ul> <li>Remove unused resources</li> <li>Use spot and reserved instances where possible</li> <li>Cost budget alerts</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#sustainability","title":"Sustainability","text":""},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#matching-aws-with-business-needs","title":"Matching AWS with business needs","text":"<ul> <li>Business needs assessment</li> <li>Familiarity of AWS srev ices</li> <li>Network \\ Compute requirements</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#network-requirements","title":"Network requirements","text":"<ul> <li>VPCs , subnets</li> <li>VPC peering</li> <li>VPN</li> <li>Direct connect</li> <li>HTTPS</li> <li>GuardDuty \\ CloudWatch network</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#compute-requirements","title":"Compute requirements","text":"<ul> <li>EC2 instances</li> <li>Managed services</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#storage-requirements","title":"Storage requirements","text":"<ul> <li>S3 bucket object storage</li> <li>Databases - SQL \\ NoSQL</li> <li>Amazon macie data classification , server side encryption</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#monitoring-and-security","title":"Monitoring and Security","text":"<ul> <li>CloudWatch monitoring</li> <li>CloudTrail auditing</li> <li>Amazon Detective</li> <li>Network ACLs</li> <li>Security groups</li> <li>WAF - web application firewall</li> <li>Security standards compliance</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#installing-aws-cli-on-windows","title":"Installing AWS CLI on Windows","text":"<pre><code>msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi\n</code></pre> <p>Using cli wizard</p> <pre><code>aws configure\n</code></pre>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#installing-aws-cli-on-linux","title":"Installing AWS CLI on Linux","text":"<ul> <li>Amazon linux image already have CLI installed</li> </ul> <pre><code>curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\n</code></pre>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#aws-powershell","title":"AWS PowerShell","text":"<pre><code>pwsh\n</code></pre> <p>Switch from bash to powershell</p>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#aws-cloudshell","title":"AWS CloudShell","text":"<ul> <li>Cloud-based shell.</li> <li>Multiple shells</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#aws-outpost","title":"AWS Outpost","text":"<ul> <li>Run AWS services on-prem or edge locations</li> <li>Equipments racks in form of U , 1U , 2U up to 42U</li> <li>U - 1.75 inches of vertical height</li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/1-Intro/#outpost-use-cases","title":"Outpost Use-cases","text":"<ul> <li>Local data processing</li> <li>Data residency restrictions</li> <li>Low latency access </li> </ul>"},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/2-DataStorageServices/","title":"2 DataStorageServices","text":""},{"location":"learning/aws/Architecture/SolutionsArchitect-associate/2-DataStorageServices/#aws-transfer","title":"AWS Transfer","text":"<ul> <li>Transfer files from local to S3 bucket</li> <li></li> </ul>"},{"location":"learning/aws/DevOps/Overall/","title":"Overall","text":""},{"location":"learning/aws/DevOps/Overall/#aws-certified-devops-engineer-professional-dop-c02-exam-guide","title":"AWS Certified DevOps Engineer -Professional (DOP-C02) Exam Guide","text":"<ul> <li>Domain 1: SDLC Automation (22% of scored content)</li> <li>Domain 2: Configuration Management and IaC (17% of scored content)</li> <li>Domain 3: Resilient Cloud Solutions (15% of scored content)</li> <li>Domain 4: Monitoring and Logging (15% of scored content)</li> <li>Domain 5: Incident and Event Response (14% of scored content)</li> <li>Domain 6: Security and Compliance (17% of scored content)</li> </ul>"},{"location":"learning/aws/DevOps/Overall/#introduction","title":"Introduction","text":"<p>The AWS Certified DevOps Engineer -Professional (DOP-C02) exam is intended for individuals who perform a DevOps engineer role. The exam validates a candidate\u2019s technical expertise in provisioning, operating, and managing distributed systems and services on AWS.</p> <p>The exam also validates a candidate\u2019s ability to complete the following tasks:</p> <ul> <li>Implement and manage continuous delivery systems and methodologies on   AWS.</li> <li>Implement and automate security controls, governance processes, and   compliance validation.</li> <li>Define and deploy monitoring, metrics, and logging systems on AWS.</li> <li>Implement systems that are highly available, scalable, and self-healing on   AWS.</li> <li>Design, manage, and maintain tools to automate operational processes.</li> </ul>"},{"location":"learning/aws/DevOps/Overall/#target-candidate-description","title":"Target candidate description","text":"<p>The target candidate should have 2 or more years of experience in provisioning, operating, and managing AWS environments. The target candidate also has experience with the software development lifecycle and programming and/or scripting.</p> <p>Recommended general IT knowledge and experience</p> <p>The target candidate should have the following experience:</p> <ul> <li>Experience in building highly automated infrastructure</li> <li>Experience in administering operating systems</li> <li>Experience with modern development and operations processes and   methodologies</li> </ul> <p>Recommended AWS knowledge and experience</p> <p>The target candidate should have experience in securing AWS infrastructure.</p> <p>Job tasks that are out of scope for the target candidate</p> <p>The following list contains job tasks that the target candidate is not expected to be able to perform. This list is non-exhaustive. These tasks are out of scope for the exam:</p> <ul> <li>Possess advanced networking knowledge (for example, advanced routing   algorithms, failover techniques).</li> <li>Provide deep-level security recommendations to developers.</li> <li>Design, query, and optimize the performance of databases.</li> <li>Develop full-stack application code.</li> </ul> <p>Refer to the Appendix for a list of technologies and concepts that might appear on the exam and a list of in-scope AWS services and features.</p>"},{"location":"learning/aws/DevOps/Overall/#exam-content","title":"Exam content","text":"<p>Response types</p> <p>There are two types of questions on the exam:</p> <ul> <li>Multiple choice: Has one correct response and three incorrect responses   (distractors)</li> <li>Multiple response: Has two or more correct responses out of five or more   response options</li> </ul> <p>Select one or more responses that best complete the statement or answer the question. Distractors, or incorrect answers, are response options that a candidate with incomplete knowledge or skill might choose. Distractors are generally plausible responses that match the content area.</p> <p>Unanswered questions are scored as incorrect; there is no penalty for guessing. The exam includes 65 questions that affect your score.</p> <p>Unscored content</p> <p>The exam includes 10 unscored questions that do not affect your score. AWS collects information about performance on these unscored questions to evaluate these questions for future use as scored questions. These unscored questions are not identified on the exam.</p> <p>Exam results</p> <p>The AWS Certified DevOps Engineer -Professional (DOP-C02) exam has a pass or fail designation. The exam is scored against a minimum standard established by AWS professionals who follow certification industry best practices and guidelines.</p> <p>Your results for the exam are reported as a scaled score of 100 \u2013 1 , 000. The minimum passing score is 750. Your score shows how you performed on the exam as a whole and whether you passed. Scaled scoring models help equate scores across multiple exam forms that might have slightly different difficulty levels.</p> <p>Your score report could contain a table of classifications of your performance at each section level. The exam uses a compensatory scoring model, which means that you do not need to achieve a passing score in each section. You need to pass only the overall exam.</p> <p>Each section of the exam has a specific weighting, so some sections have more questions than other sections have. The table of classifications contains general information that highlights your strengths and weaknesses. Use caution when you interpret section-level feedback.</p> <p>Content outline</p> <p>This exam guide includes weightings, content domains, and task statements for the exam. This guide does not provide a comprehensive list of the content on the exam. However, additional context for each task statement is available to help you prepare for the exam.</p> <p>The exam has the following content domains and weightings:</p> <ul> <li>Domain 1: SDLC Automation (22% of scored content)</li> <li>Domain 2: Configuration Management and IaC (17% of scored content)</li> <li>Domain 3: Resilient Cloud Solutions (15% of scored content)</li> <li>Domain 4: Monitoring and Logging (15% of scored content)</li> <li>Domain 5: Incident and Event Response (14% of scored content)</li> <li>Domain 6: Security and Compliance (17% of scored content)</li> </ul> <p>Domain 1: SDLC Automation</p> <p>Task Statement 1.1: Implement CI/CD pipelines.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Software development lifecycle (SDLC) concepts, phases, and models</li> <li>Pipeline deployment patterns for single-and multi-account environments</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Configuring code, image, and artifact repositories</li> <li>Using version control to integrate pipelines with application environments</li> <li>Setting up build processes (for example, AWS CodeBuild)</li> <li>Managing build and deployment secrets (for example, AWS Secrets   Manager, AWS Systems Manager Parameter Store)</li> <li>Determining appropriate deployment strategies (for example, AWS   CodeDeploy)</li> </ul> <p>Task Statement 1.2: Integrate automated testing into CI/CD pipelines.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Different types of tests (for example, unit tests, integration tests,   acceptance tests, user interface tests, security scans)</li> <li>Reasonable use of different types of tests at different stages of the CI/CD   pipeline</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Running builds or tests when generating pull requests or code merges (for   example, CodeBuild)</li> <li>Running load/stress tests, performance benchmarking, and application   testing at scale</li> <li>Measuring application health based on application exit codes</li> <li>Automating unit tests and code coverage</li> <li>Invoking AWS services in a pipeline for testing</li> </ul> <p>Task Statement 1.3: Build and manage artifacts.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Artifact use cases and secure management</li> <li>Methods to create and generate artifacts</li> <li>Artifact lifecycle considerations</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Creating and configuring artifact repositories (for example, AWS   CodeArtifact, Amazon S3, Amazon Elastic Container Registry [Amazon ECR])</li> <li>Configuring build tools for generating artifacts (for example, CodeBuild,   AWS Lambda)</li> <li>Automating Amazon EC2 instance and container image build processes (for   example, EC2 Image Builder)</li> </ul> <p>Task Statement 1. 4 : Implement deployment strategies for instance, container, and serverless environments.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Deployment methodologies for various platforms (for example, Amazon   EC2, Amazon Elastic Container Service [Amazon ECS], Amazon Elastic   Kubernetes Service [Amazon EKS], Lambda)</li> <li>Application storage patterns (for example, Amazon Elastic File System   [Amazon EFS], Amazon S3, Amazon Elastic Block Store [Amazon EBS])</li> <li>Mutable deployment patterns in contrast to immutable deployment   patterns</li> <li>Tools and services available for distributing code (for example, CodeDeploy,   EC2 Image Builder)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Configuring security permissions to allow access to artifact repositories (for   example, AWS Identity and Access Management [IAM], CodeArtifact)</li> <li>Configuring deployment agents (for example, CodeDeploy agent)</li> <li>Troubleshooting deployment issues</li> <li>Using different deployment methods (for example, blue/green, canary)</li> </ul> <p>Domain 2 : Configuration Management and IaC</p> <p>Task Statement 2.1: Define cloud infrastructure and reusable components to provision and manage systems throughout their lifecycle.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Infrastructure as code (IaC) options and tools for AWS</li> <li>Change management processes for IaC-based platforms</li> <li>Configuration management services and strategies</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Composing and deploying IaC templates (for example, AWS Serverless   Application Model [AWS SAM], AWS CloudFormation, AWS Cloud   Development Kit [AWS CDK])</li> <li>Applying CloudFormation StackSets across multiple accounts and AWS   Regions</li> <li>Determining optimal configuration management services (for example,   AWS OpsWorks, AWS Systems Manager, AWS Config, AWS AppConfig)</li> <li>Implementing infrastructure patterns, governance controls, and security   standards into reusable IaC templates (for example, AWS Service Catalog,   CloudFormation modules, AWS CDK)</li> </ul> <p>Task Statement 2.2: Deploy automation to create, onboard, and secure AWS accounts in a multi-account or multi-Region environment.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>AWS account structures, best practices, and related AWS services</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Standardizing and automating account provisioning and configuration</li> <li>Creating, consolidating, and centrally managing accounts (for example,   AWS Organizations, AWS Control Tower)</li> <li>Applying IAM solutions for multi-account and complex organization   structures (for example, SCPs, assuming roles)</li> <li>Implementing and developing governance and security controls at scale   (AWS Config, AWS Control Tower, AWS Security Hub, Amazon Detective,   Amazon GuardDuty, AWS Service Catalog, SCPs)</li> </ul> <p>Task Statement 2.3: Design and build automated solutions for complex tasks and large-scale environments.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>AWS services and solutions to automate tasks and processes</li> <li>Methods and strategies to interact with the AWS software-defined   infrastructure</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Automating system inventory, configuration, and patch management (for   example, Systems Manager, AWS Config)</li> <li>Developing Lambda function automations for complex scenarios (for   example, AWS SDKs, Lambda, AWS Step Functions)</li> <li>Automating the configuration of software applications to the desired state   (for example, OpsWorks, Systems Manager State Manager)</li> <li>Maintaining software compliance (for example, Systems Manager)</li> </ul> <p>Domain 3: Resilient Cloud Solutions</p> <p>Task Statement 3.1: Implement highly available solutions to meet resilience and business requirements.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Multi-AZ and multi-Region deployments (for example, compute layer, data   layer)</li> <li>SLAs</li> <li>Replication and failover methods for stateful services</li> <li>Techniques to achieve high availability (for example, Multi-AZ, multi-Region)   Skills in:</li> <li>Translating business requirements into technical resiliency needs</li> <li>Identifying and remediating single points of failure in existing workloads</li> <li>Enabling cross-Region solutions where available (for example, Amazon   DynamoDB, Amazon RDS, Amazon Route 53, Amazon S3, Amazon   CloudFront)</li> <li>Configuring load balancing to support cross-AZ services</li> <li>Configuring applications and related services to support multiple   Availability Zones and Regions while minimizing downtime</li> </ul> <p>Task Statement 3.2: Implement solutions that are scalable to meet business requirements.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Appropriate metrics for scaling services</li> <li>Loosely coupled and distributed architectures</li> <li>Serverless architectures</li> <li>Container platforms</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Identifying and remediating scaling issues</li> <li>Identifying and implementing appropriate auto scaling, load balancing, and   caching solutions</li> <li>Deploying container-based applications (for example, Amazon ECS, Amazon   EKS)</li> <li>Deploying workloads in multiple Regions for global scalability</li> <li>Configuring serverless applications (for example, Amazon API Gateway,   Lambda, AWS Fargate)</li> </ul> <p>Task Statement 3.3: Implement automated recovery processes to meet RTO and RPO requirements.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Disaster recovery concepts (for example, RTO, RPO)</li> <li>Backup and recovery strategies (for example, pilot light, warm standby)</li> <li>Recovery procedures</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Testing failover of Multi-AZ and multi-Region workloads (for example,   Amazon RDS, Amazon Aurora, Route 53, CloudFront)</li> <li>Identifying and implementing appropriate cross-Region backup and   recovery strategies (for example, AWS Backup, Amazon S3, Systems   Manager)</li> <li>Configuring a load balancer to recover from backend failure</li> </ul> <p>Domain 4: Monitoring and Logging</p> <p>Task Statement 4.1: Configure the collection, aggregation, and storage of logs and metrics.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>How to monitor applications and infrastructure</li> <li>Amazon CloudWatch metrics (for example, namespaces, metrics, dimensions,   and resolution)</li> <li>Real-time log ingestion</li> <li>Encryption options for at-rest and in-transit logs and metrics (for example,   client-side and server-side, AWS Key Management Service [AWS KMS])</li> <li>Security configurations (for example, IAM roles and permissions to allow for   log collection)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Securely storing and managing logs</li> <li>Creating CloudWatch metrics from log events by using metric filters</li> <li>Creating CloudWatch metric streams (for example, Amazon S3 or Amazon   Kinesis Data Firehose options)</li> <li>Collecting custom metrics (for example, using the CloudWatch agent)</li> <li>Managing log storage lifecycles (for example, S3 lifecycles, CloudWatch log   group retention)</li> <li>Processing log data by using CloudWatch log subscriptions (for example,   Kinesis, Lambda, Amazon OpenSearch Service)</li> <li>Searching log data by using filter and pattern syntax or CloudWatch Logs   Insights</li> <li>Configuring encryption of log data (for example, AWS KMS)</li> </ul> <p>Task Statement 4.2: Audit, monitor, and analyze logs and metrics to detect issues.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Anomaly detection alarms (for example, CloudWatch anomaly detection)</li> <li>Common CloudWatch metrics and logs (for example, CPU utilization with   Amazon EC2, queue length with Amazon RDS, 5xx errors with an   Application Load Balancer [ALB])</li> <li>Amazon Inspector and common assessment templates</li> <li>AWS Config rules</li> <li>AWS CloudTrail log events</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Building CloudWatch dashboards and Amazon QuickSight visualizations</li> <li>Associating CloudWatch alarms with CloudWatch metrics (standard and   custom)</li> <li>Configuring AWS X-Ray for different services (for example, containers, API   Gateway, Lambda)</li> <li>Analyzing real-time log streams (for example, using Kinesis Data Streams)</li> <li>Analyzing logs with AWS services (for example, Amazon Athena,   CloudWatch Logs Insights)</li> </ul> <p>Task Statement 4.3: Automate monitoring and event management of complex environments.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Event-driven, asynchronous design patterns (for example, S3 Event   Notifications or Amazon EventBridge events to Amazon Simple Notification   Service [Amazon SNS] or Lambda)</li> <li>Capabilities of auto scaling for a variety of AWS services (for example, EC   Auto Scaling groups, RDS storage auto scaling, DynamoDB, ECS capacity   provider, EKS autoscalers)</li> <li>Alert notification and action capabilities (for example, CloudWatch alarms   to Amazon SNS, Lambda, EC2 automatic recovery)</li> <li>Health check capabilities in AWS services (for example, ALB target groups,   Route 53)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Configuring solutions for auto scaling (for example, DynamoDB, EC2 Auto   Scaling groups, RDS storage auto scaling, ECS capacity provider)</li> <li>Creating CloudWatch custom metrics and metric filters, alarms, and   notifications (for example, Amazon SNS, Lambda)</li> <li>Configuring S3 events to process log files (for example, by using Lambda)   and deliver log files to another destination (for example, OpenSearch   Service, CloudWatch Logs)</li> <li>Configuring EventBridge to send notifications based on a particular event   pattern</li> <li>Installing and configuring agents on EC2 instances (for example, AWS   Systems Manager Agent [SSM Agent], CloudWatch agent)</li> <li>Configuring AWS Config rules to remediate issues</li> <li>Configuring health checks (for example, Route 53, ALB)</li> </ul> <p>Domain 5: Incident and Event Response</p> <p>Task Statement 5.1: Manage event sources to process, notify, and take action in response to events.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>AWS services that generate, capture, and process events (for example, AWS   Health, EventBridge, CloudTrail)</li> <li>Event-driven architectures (for example, fan out, event streaming, queuing)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Integrating AWS event sources (for example, AWS Health, EventBridge,   CloudTrail)</li> <li>Building event processing workflows (for example, Amazon Simple Queue   Service [Amazon SQS], Kinesis, Amazon SNS, Lambda, Step Functions)</li> </ul> <p>Task Statement 5.2: Implement configuration changes in response to events.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Fleet management services (for example, Systems Manager, AWS Auto   Scaling)</li> <li>Configuration management services (for example, AWS Config)   Skills in:</li> <li>Applying configuration changes to systems</li> <li>Modifying infrastructure configurations in response to events</li> <li>Remediating a non-desired system state</li> </ul> <p>Task Statement 5.3: Troubleshoot system and application failures.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>AWS metrics and logging services (for example, CloudWatch, X-Ray)</li> <li>AWS service health services (for example, AWS Health, CloudWatch,   Systems Manager OpsCenter)</li> <li>Root cause analysis</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Analyzing failed deployments (for example, AWS CodePipeline, CodeBuild,   CodeDeploy, CloudFormation, CloudWatch synthetic monitoring)</li> <li>Analyzing incidents regarding failed processes (for example, auto scaling,   Amazon ECS, Amazon EKS)</li> </ul> <p>Domain 6 : Security and Compliance</p> <p>Task Statement 6 .1: Implement techniques for identity and access management at scale.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Appropriate usage of different IAM entities for human and machine access   (for example, users, groups, roles, identity providers, identity-based policies,   resource-based policies, session policies)</li> <li>Identity federation techniques (for example, using IAM identity providers   and AWS IAM Identity Center)</li> <li>Permission management delegation by using IAM permissions boundaries</li> <li>Organizational SCPs</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Designing policies to enforce least privilege access</li> <li>Implementing role-based and attribute-based access control patterns</li> <li>Automating credential rotation for machine identities (for example, Secrets   Manager)</li> <li>Managing permissions to control access to human and machine identities   (for example, enabling multi-factor authentication [MFA], AWS Security   Token Service [AWS STS], IAM profiles)</li> </ul> <p>Task Statement 6 .2: Apply automation for security controls and data protection.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Network security components (for example, security groups, network ACLs,   routing, AWS Network Firewall, AWS WAF, AWS Shield)</li> <li>Certificates and public key infrastructure (PKI)</li> <li>Data management (for example, data classification, encryption, key   management, access controls)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Automating the application of security controls in multi-account and   multi-Region environments (for example, Security Hub, Organizations, AWS   Control Tower, Systems Manager)</li> <li>Combining security controls to apply defense in depth (for example, AWS   Certificate Manager [ACM], AWS WAF, AWS Config, AWS Config rules,   Security Hub, GuardDuty, security groups, network ACLs, Amazon Detective,   Network Firewall)</li> <li>Automating the discovery of sensitive data at scale (for example, Amazon   Macie)</li> <li>Encrypting data in transit and data at rest (for example, AWS KMS, AWS   CloudHSM, ACM)</li> </ul> <p>Task Statement 6 .3: Implement security monitoring and auditing solutions.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Security auditing services and features (for example, CloudTrail, AWS   Config, VPC Flow Logs, CloudFormation drift detection)</li> <li>AWS services for identifying security vulnerabilities and events (for   example, GuardDuty, Amazon Inspector, IAM Access Analyzer, AWS Config)</li> <li>Common cloud security threats (for example, insecure web traffic, exposed   AWS access keys, S3 buckets with public access enabled or encryption   disabled)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Implementing robust security auditing</li> <li>Configuring alerting based on unexpected or anomalous security events</li> <li>Configuring service and application logging (for example, CloudTrail,   CloudWatch Logs)</li> <li>Analyzing logs, metrics, and security findings</li> </ul>"},{"location":"learning/aws/DevOps/Overall/#appendix","title":"Appendix","text":"<p>Technologies and concepts that might appear on the exam</p> <p>The following list contains technologies and concepts that might appear on the exam. This list is non-exhaustive and is subject to change. The order and placement of the items in this list is no indication of their relative weight or importance on the exam:</p> <ul> <li>Application deployment</li> <li>Application integration</li> <li>Application pipelines</li> <li>Automation</li> <li>Code repository best practices</li> <li>Cost optimization</li> <li>Deployment requirements</li> <li>Hybrid deployments</li> <li>IAM policies</li> <li>Metrics, monitoring, alarms, and logging</li> <li>Network ACL and security group design and implementation</li> <li>Operational best practices</li> <li>Rollback procedures</li> </ul> <p>In-scope AWS services and features</p> <p>The following list contains AWS services and features that are in scope for the exam. This list is non-exhaustive and is subject to change. AWS offerings appear in categories that align with the offerings\u2019 primary functions:</p> <p>Analytics:</p> <ul> <li>Amazon Athena</li> <li>Amazon EMR</li> <li>Amazon Kinesis Data Firehose</li> <li>Amazon Kinesis Data Streams</li> <li>Amazon OpenSearch Service</li> <li>Amazon QuickSight</li> </ul> <p>Application Integration:</p> <ul> <li>Amazon AppFlow</li> <li>Amazon EventBridge</li> </ul> <p>Compute:</p> <ul> <li>AWS App Runner</li> <li>Amazon EC</li> <li>Amazon EC2 Auto Scaling</li> <li>EC2 Image Builder</li> <li>AWS Elastic Beanstalk</li> <li>AWS Serverless Application Repository</li> </ul> <p>Containers:</p> <ul> <li>AWS App2Container</li> <li>AWS Copilot</li> <li>Amazon Elastic Container Registry (Amazon ECR)</li> <li>Amazon Elastic Container Service (Amazon ECS)</li> <li>Amazon Elastic Kubernetes Service (Amazon EKS)</li> <li>Amazon EKS Distro</li> <li>AWS Fargate</li> <li>Red Hat OpenShift Service on AWS (ROSA)</li> </ul> <p>Database:</p> <ul> <li>Amazon Aurora</li> <li>Amazon Aurora Serverless v</li> <li>AWS Database Migration Service (AWS DMS)</li> <li>Amazon DocumentDB (with MongoDB compatibility)</li> <li>Amazon DynamoDB</li> <li>Amazon ElastiCache</li> <li>Amazon MemoryDB for Redis</li> <li>Amazon RDS</li> <li>Amazon Redshift</li> </ul> <p>Developer Tools:</p> <ul> <li>AWS CLI</li> <li>AWS Cloud Development Kit (AWS CDK)</li> <li>AWS CloudShell</li> <li>AWS CodeArtifact</li> <li>AWS CodeBuild</li> <li>AWS CodeDeploy</li> <li>Amazon CodeGuru</li> <li>AWS CodePipeline</li> <li>AWS CodeStar</li> <li>AWS Fault Injection Simulator (AWS FIS)</li> <li>AWS SDKs and Tools</li> <li>AWS X-Ray</li> </ul> <p>Management and Governance:</p> <ul> <li>AWS Auto Scaling</li> <li>AWS CloudFormation</li> <li>AWS CloudTrail</li> <li>Amazon CloudWatch</li> <li>Amazon CloudWatch Logs</li> <li>AWS Compute Optimizer</li> <li>AWS Config</li> <li>AWS Control Tower</li> <li>AWS Health</li> <li>AWS License Manager</li> <li>Amazon Managed Grafana</li> <li>Amazon Managed Service for Prometheus</li> <li>AWS OpsWorks</li> <li>AWS Organizations</li> <li>AWS Proton</li> <li>AWS Resilience Hub</li> <li>AWS Service Catalog</li> <li>AWS Systems Manager</li> <li>AWS Trusted Advisor</li> </ul> <p>Networking and Content Delivery:</p> <ul> <li>Amazon API Gateway</li> <li>AWS Client VPN</li> <li>Amazon CloudFront</li> <li>Elastic Load Balancing (ELB)</li> <li>AWS PrivateLink</li> <li>Amazon Route 53</li> <li>AWS Site-to-Site VPN</li> <li>AWS Transit Gateway</li> <li>Amazon VPC</li> </ul> <p>Security, Identity, and Compliance:</p> <ul> <li>AWS Certificate Manager (ACM)</li> <li>AWS CloudHSM</li> <li>Amazon Cognito</li> <li>Amazon Detective</li> <li>AWS Directory Service</li> <li>Amazon GuardDuty</li> <li>AWS IAM Identity Center</li> <li>AWS Identity and Access Management (IAM)</li> <li>Amazon Inspector</li> <li>AWS Key Management Service (AWS KMS)</li> <li>Amazon Macie</li> <li>AWS Network Firewall</li> <li>AWS Resource Access Manager (AWS RAM)</li> <li>AWS Secrets Manager</li> <li>AWS Security Hub</li> <li>AWS Security Token Service (AWS STS)</li> <li>AWS Shield</li> <li>AWS WAF</li> </ul> <p>Serverless:</p> <ul> <li>AWS Lambda</li> <li>AWS Serverless Application Model (AWS SAM)</li> <li>Amazon Simple Notification Service (Amazon SNS)</li> <li>Amazon Simple Queue Service (Amazon SQS)</li> <li>AWS Step Functions</li> </ul> <p>Storage:</p> <ul> <li>AWS Backup</li> <li>Amazon Elastic Block Store (Amazon EBS)</li> <li>AWS Elastic Disaster Recovery</li> <li>Amazon Elastic File System (Amazon EFS)</li> <li>Amazon FSx for Lustre</li> <li>Amazon FSx for NetApp ONTAP</li> <li>Amazon FSx for OpenZFS</li> <li>Amazon FSx for Windows File Server</li> <li>Amazon S</li> <li>Amazon S3 Glacier</li> <li>AWS Storage Gateway</li> </ul>"},{"location":"learning/aws/DevOps/Domain1-SDLC/","title":"Index","text":"<p>Domain 1: SDLC Automation</p>"},{"location":"learning/aws/DevOps/Domain1-SDLC/#ci","title":"CI","text":"<ul> <li>AWS CodeBuild</li> <li>AWS Secrets Manager</li> <li>AWS Systems Manager Parameter Store</li> <li>AWS CodeDeploy</li> <li>AWS CodeArtifact</li> <li>AWS Elastic Container Registry [Amazon ECR]</li> <li>AWS S3</li> <li>AWS EC2 Image Builder</li> </ul>"},{"location":"learning/aws/DevOps/Domain1-SDLC/#cd","title":"CD","text":"<ul> <li>AWS EC2</li> <li>AWS Elastic Container Service [Amazon ECS]</li> <li>AWS Elastic Kubernetes Service [Amazon EKS]</li> <li>AWS Elastic File System [Amazon EFS]</li> <li>AWS Elastic Block Store [Amazon EBS]</li> <li>AWS Identity and Access Management [IAM]</li> </ul> <p>Task Statement 1.1: Implement CI/CD pipelines.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Software development lifecycle (SDLC) concepts, phases, and models</li> <li>Pipeline deployment patterns for single-and multi-account environments</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Configuring code, image, and artifact repositories</li> <li>Using version control to integrate pipelines with application environments</li> <li>Setting up build processes (for example, AWS CodeBuild)</li> <li>Managing build and deployment secrets (for example, AWS Secrets   Manager, AWS Systems Manager Parameter Store)</li> <li>Determining appropriate deployment strategies (for example, AWS   CodeDeploy)</li> </ul> <p>Task Statement 1.2: Integrate automated testing into CI/CD pipelines.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Different types of tests (for example, unit tests, integration tests,   acceptance tests, user interface tests, security scans)</li> <li>Reasonable use of different types of tests at different stages of the CI/CD   pipeline</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Running builds or tests when generating pull requests or code merges (for   example, CodeBuild)</li> <li>Running load/stress tests, performance benchmarking, and application   testing at scale</li> <li>Measuring application health based on application exit codes</li> <li>Automating unit tests and code coverage</li> <li>Invoking AWS services in a pipeline for testing</li> </ul> <p>Task Statement 1.3: Build and manage artifacts.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Artifact use cases and secure management</li> <li>Methods to create and generate artifacts</li> <li>Artifact lifecycle considerations</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Creating and configuring artifact repositories (for example, AWS   CodeArtifact, Amazon S3, Amazon Elastic Container Registry [Amazon ECR])</li> <li>Configuring build tools for generating artifacts (for example, CodeBuild,   AWS Lambda)</li> <li>Automating Amazon EC2 instance and container image build processes (for   example, EC2 Image Builder)</li> </ul> <p>Task Statement 1. 4 : Implement deployment strategies for instance, container, and serverless environments.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Deployment methodologies for various platforms (for example, Amazon   EC2, Amazon Elastic Container Service [Amazon ECS], Amazon Elastic   Kubernetes Service [Amazon EKS], Lambda)</li> <li>Application storage patterns (for example, Amazon Elastic File System   [Amazon EFS], Amazon S3, Amazon Elastic Block Store [Amazon EBS])</li> <li>Mutable deployment patterns in contrast to immutable deployment   patterns</li> <li>Tools and services available for distributing code (for example, CodeDeploy,   EC2 Image Builder)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Configuring security permissions to allow access to artifact repositories (for   example, AWS Identity and Access Management [IAM], CodeArtifact)</li> <li>Configuring deployment agents (for example, CodeDeploy agent)</li> <li>Troubleshooting deployment issues</li> <li>Using different deployment methods (for example, blue/green, canary)</li> </ul>"},{"location":"learning/aws/DevOps/Domain2-ConfigurationIAC/","title":"Index","text":"<p>Domain 2 : Configuration Management and IaC</p> <p>Task Statement 2.1: Define cloud infrastructure and reusable components to provision and manage systems throughout their lifecycle.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Infrastructure as code (IaC) options and tools for AWS</li> <li>Change management processes for IaC-based platforms</li> <li>Configuration management services and strategies</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Composing and deploying IaC templates (for example, AWS Serverless   Application Model [AWS SAM], AWS CloudFormation, AWS Cloud   Development Kit [AWS CDK])</li> <li>Applying CloudFormation StackSets across multiple accounts and AWS   Regions</li> <li>Determining optimal configuration management services (for example,   AWS OpsWorks, AWS Systems Manager, AWS Config, AWS AppConfig)</li> <li>Implementing infrastructure patterns, governance controls, and security   standards into reusable IaC templates (for example, AWS Service Catalog,   CloudFormation modules, AWS CDK)</li> </ul> <p>Task Statement 2.2: Deploy automation to create, onboard, and secure AWS accounts in a multi-account or multi-Region environment.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>AWS account structures, best practices, and related AWS services</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Standardizing and automating account provisioning and configuration</li> <li>Creating, consolidating, and centrally managing accounts (for example,   AWS Organizations, AWS Control Tower)</li> <li>Applying IAM solutions for multi-account and complex organization   structures (for example, SCPs, assuming roles)</li> <li>Implementing and developing governance and security controls at scale   (AWS Config, AWS Control Tower, AWS Security Hub, Amazon Detective,   Amazon GuardDuty, AWS Service Catalog, SCPs)</li> </ul> <p>Task Statement 2.3: Design and build automated solutions for complex tasks and large-scale environments.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>AWS services and solutions to automate tasks and processes</li> <li>Methods and strategies to interact with the AWS software-defined   infrastructure</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Automating system inventory, configuration, and patch management (for   example, Systems Manager, AWS Config)</li> <li>Developing Lambda function automations for complex scenarios (for   example, AWS SDKs, Lambda, AWS Step Functions)</li> <li>Automating the configuration of software applications to the desired state   (for example, OpsWorks, Systems Manager State Manager)</li> <li>Maintaining software compliance (for example, Systems Manager)</li> </ul>"},{"location":"learning/aws/DevOps/Domain3-ResilientCloudSolutions/","title":"Index","text":"<p>Domain 3: Resilient Cloud Solutions</p> <p>Task Statement 3.1: Implement highly available solutions to meet resilience and business requirements.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Multi-AZ and multi-Region deployments (for example, compute layer, data   layer)</li> <li>SLAs</li> <li>Replication and failover methods for stateful services</li> <li>Techniques to achieve high availability (for example, Multi-AZ, multi-Region)   Skills in:</li> <li>Translating business requirements into technical resiliency needs</li> <li>Identifying and remediating single points of failure in existing workloads</li> <li>Enabling cross-Region solutions where available (for example, Amazon   DynamoDB, Amazon RDS, Amazon Route 53, Amazon S3, Amazon   CloudFront)</li> <li>Configuring load balancing to support cross-AZ services</li> <li>Configuring applications and related services to support multiple   Availability Zones and Regions while minimizing downtime</li> </ul> <p>Task Statement 3.2: Implement solutions that are scalable to meet business requirements.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Appropriate metrics for scaling services</li> <li>Loosely coupled and distributed architectures</li> <li>Serverless architectures</li> <li>Container platforms</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Identifying and remediating scaling issues</li> <li>Identifying and implementing appropriate auto scaling, load balancing, and   caching solutions</li> <li>Deploying container-based applications (for example, Amazon ECS, Amazon   EKS)</li> <li>Deploying workloads in multiple Regions for global scalability</li> <li>Configuring serverless applications (for example, Amazon API Gateway,   Lambda, AWS Fargate)</li> </ul> <p>Task Statement 3.3: Implement automated recovery processes to meet RTO and RPO requirements.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Disaster recovery concepts (for example, RTO, RPO)</li> <li>Backup and recovery strategies (for example, pilot light, warm standby)</li> <li>Recovery procedures</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Testing failover of Multi-AZ and multi-Region workloads (for example,   Amazon RDS, Amazon Aurora, Route 53, CloudFront)</li> <li>Identifying and implementing appropriate cross-Region backup and   recovery strategies (for example, AWS Backup, Amazon S3, Systems   Manager)</li> <li>Configuring a load balancer to recover from backend failure</li> </ul>"},{"location":"learning/aws/DevOps/Domain4-MonitoringAndLogging/","title":"Index","text":"<p>Domain 4: Monitoring and Logging</p> <p>Task Statement 4.1: Configure the collection, aggregation, and storage of logs and metrics.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>How to monitor applications and infrastructure</li> <li>Amazon CloudWatch metrics (for example, namespaces, metrics, dimensions,   and resolution)</li> <li>Real-time log ingestion</li> <li>Encryption options for at-rest and in-transit logs and metrics (for example,   client-side and server-side, AWS Key Management Service [AWS KMS])</li> <li>Security configurations (for example, IAM roles and permissions to allow for   log collection)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Securely storing and managing logs</li> <li>Creating CloudWatch metrics from log events by using metric filters</li> <li>Creating CloudWatch metric streams (for example, Amazon S3 or Amazon   Kinesis Data Firehose options)</li> <li>Collecting custom metrics (for example, using the CloudWatch agent)</li> <li>Managing log storage lifecycles (for example, S3 lifecycles, CloudWatch log   group retention)</li> <li>Processing log data by using CloudWatch log subscriptions (for example,   Kinesis, Lambda, Amazon OpenSearch Service)</li> <li>Searching log data by using filter and pattern syntax or CloudWatch Logs   Insights</li> <li>Configuring encryption of log data (for example, AWS KMS)</li> </ul> <p>Task Statement 4.2: Audit, monitor, and analyze logs and metrics to detect issues.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Anomaly detection alarms (for example, CloudWatch anomaly detection)</li> <li>Common CloudWatch metrics and logs (for example, CPU utilization with   Amazon EC2, queue length with Amazon RDS, 5xx errors with an   Application Load Balancer [ALB])</li> <li>Amazon Inspector and common assessment templates</li> <li>AWS Config rules</li> <li>AWS CloudTrail log events</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Building CloudWatch dashboards and Amazon QuickSight visualizations</li> <li>Associating CloudWatch alarms with CloudWatch metrics (standard and   custom)</li> <li>Configuring AWS X-Ray for different services (for example, containers, API   Gateway, Lambda)</li> <li>Analyzing real-time log streams (for example, using Kinesis Data Streams)</li> <li>Analyzing logs with AWS services (for example, Amazon Athena,   CloudWatch Logs Insights)</li> </ul> <p>Task Statement 4.3: Automate monitoring and event management of complex environments.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Event-driven, asynchronous design patterns (for example, S3 Event   Notifications or Amazon EventBridge events to Amazon Simple Notification   Service [Amazon SNS] or Lambda)</li> <li>Capabilities of auto scaling for a variety of AWS services (for example, EC   Auto Scaling groups, RDS storage auto scaling, DynamoDB, ECS capacity   provider, EKS autoscalers)</li> <li>Alert notification and action capabilities (for example, CloudWatch alarms   to Amazon SNS, Lambda, EC2 automatic recovery)</li> <li>Health check capabilities in AWS services (for example, ALB target groups,   Route 53)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Configuring solutions for auto scaling (for example, DynamoDB, EC2 Auto   Scaling groups, RDS storage auto scaling, ECS capacity provider)</li> <li>Creating CloudWatch custom metrics and metric filters, alarms, and   notifications (for example, Amazon SNS, Lambda)</li> <li>Configuring S3 events to process log files (for example, by using Lambda)   and deliver log files to another destination (for example, OpenSearch   Service, CloudWatch Logs)</li> <li>Configuring EventBridge to send notifications based on a particular event   pattern</li> <li>Installing and configuring agents on EC2 instances (for example, AWS   Systems Manager Agent [SSM Agent], CloudWatch agent)</li> <li>Configuring AWS Config rules to remediate issues</li> <li>Configuring health checks (for example, Route 53, ALB)</li> </ul>"},{"location":"learning/aws/DevOps/Domain5-IncidentAndEventResponse/","title":"Index","text":"<p>Domain 5: Incident and Event Response</p> <p>Task Statement 5.1: Manage event sources to process, notify, and take action in response to events.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>AWS services that generate, capture, and process events (for example, AWS   Health, EventBridge, CloudTrail)</li> <li>Event-driven architectures (for example, fan out, event streaming, queuing)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Integrating AWS event sources (for example, AWS Health, EventBridge,   CloudTrail)</li> <li>Building event processing workflows (for example, Amazon Simple Queue   Service [Amazon SQS], Kinesis, Amazon SNS, Lambda, Step Functions)</li> </ul> <p>Task Statement 5.2: Implement configuration changes in response to events.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Fleet management services (for example, Systems Manager, AWS Auto   Scaling)</li> <li>Configuration management services (for example, AWS Config)   Skills in:</li> <li>Applying configuration changes to systems</li> <li>Modifying infrastructure configurations in response to events</li> <li>Remediating a non-desired system state</li> </ul> <p>Task Statement 5.3: Troubleshoot system and application failures.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>AWS metrics and logging services (for example, CloudWatch, X-Ray)</li> <li>AWS service health services (for example, AWS Health, CloudWatch,   Systems Manager OpsCenter)</li> <li>Root cause analysis</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Analyzing failed deployments (for example, AWS CodePipeline, CodeBuild,   CodeDeploy, CloudFormation, CloudWatch synthetic monitoring)</li> <li>Analyzing incidents regarding failed processes (for example, auto scaling,   Amazon ECS, Amazon EKS)</li> </ul>"},{"location":"learning/aws/DevOps/Domain6-SecurityAndCompliance/","title":"Index","text":"<p>Domain 6 : Security and Compliance</p> <p>Task Statement 6 .1: Implement techniques for identity and access management at scale.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Appropriate usage of different IAM entities for human and machine access   (for example, users, groups, roles, identity providers, identity-based policies,   resource-based policies, session policies)</li> <li>Identity federation techniques (for example, using IAM identity providers   and AWS IAM Identity Center)</li> <li>Permission management delegation by using IAM permissions boundaries</li> <li>Organizational SCPs</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Designing policies to enforce least privilege access</li> <li>Implementing role-based and attribute-based access control patterns</li> <li>Automating credential rotation for machine identities (for example, Secrets   Manager)</li> <li>Managing permissions to control access to human and machine identities   (for example, enabling multi-factor authentication [MFA], AWS Security   Token Service [AWS STS], IAM profiles)</li> </ul> <p>Task Statement 6 .2: Apply automation for security controls and data protection.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Network security components (for example, security groups, network ACLs,   routing, AWS Network Firewall, AWS WAF, AWS Shield)</li> <li>Certificates and public key infrastructure (PKI)</li> <li>Data management (for example, data classification, encryption, key   management, access controls)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Automating the application of security controls in multi-account and   multi-Region environments (for example, Security Hub, Organizations, AWS   Control Tower, Systems Manager)</li> <li>Combining security controls to apply defense in depth (for example, AWS   Certificate Manager [ACM], AWS WAF, AWS Config, AWS Config rules,   Security Hub, GuardDuty, security groups, network ACLs, Amazon Detective,   Network Firewall)</li> <li>Automating the discovery of sensitive data at scale (for example, Amazon   Macie)</li> <li>Encrypting data in transit and data at rest (for example, AWS KMS, AWS   CloudHSM, ACM)</li> </ul> <p>Task Statement 6 .3: Implement security monitoring and auditing solutions.</p> <pre><code>Knowledge of:\n</code></pre> <ul> <li>Security auditing services and features (for example, CloudTrail, AWS   Config, VPC Flow Logs, CloudFormation drift detection)</li> <li>AWS services for identifying security vulnerabilities and events (for   example, GuardDuty, Amazon Inspector, IAM Access Analyzer, AWS Config)</li> <li>Common cloud security threats (for example, insecure web traffic, exposed   AWS access keys, S3 buckets with public access enabled or encryption   disabled)</li> </ul> <pre><code>Skills in:\n</code></pre> <ul> <li>Implementing robust security auditing</li> <li>Configuring alerting based on unexpected or anomalous security events</li> <li>Configuring service and application logging (for example, CloudTrail,   CloudWatch Logs)</li> <li>Analyzing logs, metrics, and security findings</li> </ul>"},{"location":"learning/aws/Development/","title":"Developer document","text":""},{"location":"learning/aws/Security/","title":"Placeholder","text":""},{"location":"learning/k8s/advanced/","title":"Advanced","text":"<ol> <li>Custom Resource Definitions (CRDs) &amp; Operators    \u2022 Extend Kubernetes API with custom resources to manage complex applications. Operators use CRDs and controllers to    automate operational tasks.</li> <li>Kubernetes API Server &amp; Admission Controllers    \u2022 Learn about API server internals, authentication, authorization, and dynamic admission controllers for policy    enforcement.</li> <li>Multi-Tenancy in Kubernetes    \u2022 Strategies for isolating workloads across teams/namespaces using RBAC, network policies, and resource quotas.</li> <li>Kubernetes Scheduling &amp; Custom Schedulers    \u2022 Understand pod scheduling, affinity/anti-affinity, taints/tolerations, and how to create custom schedulers.</li> <li>Kubernetes Security &amp; Pod Security Standards    \u2022 Implement RBAC, Pod Security Policies (deprecated) or Pod Security Admission, Seccomp, AppArmor, and runtime    security tools like Falco.</li> <li>Service Mesh (Istio, Linkerd, Cilium)    \u2022 Enhance networking with service discovery, traffic shaping, observability, and security between microservices.</li> <li>Kubernetes Networking (CNI, Network Policies, eBPF)    \u2022 Learn about CNI plugins (Calico, Cilium), Kubernetes DNS, ingress controllers, and network policies for security.</li> <li>Persistent Storage &amp; CSI (Container Storage Interface)    \u2022 Understand stateful applications, dynamic provisioning, volume snapshots, and distributed storage options like    Rook/Ceph.</li> <li>Kubernetes Autoscaling (HPA, VPA, KEDA)    \u2022 Scale workloads dynamically using CPU/memory metrics (HPA), advanced scaling with KEDA, and resource    recommendations with VPA.</li> <li>Observability: Logging, Monitoring &amp; Tracing     \u2022 Use Prometheus, Grafana, Loki, OpenTelemetry, and Fluentd for full-stack observability and distributed tracing.</li> <li>Multi-Cluster &amp; Hybrid Deployments (KubeFed, Cluster API, Anthos)     \u2022 Manage workloads across multiple clusters using Federation, Cluster API, or cloud-native hybrid solutions.</li> <li>Kubernetes Performance Optimization     \u2022 Tuning etcd, optimizing scheduling, reducing API server load, and tweaking resource requests/limits for     efficiency.</li> <li>Kubernetes Policy Enforcement (OPA/Gatekeeper, Kyverno)     \u2022 Enforce security and compliance policies using Open Policy Agent (OPA) or Kyverno.</li> <li>GitOps with ArgoCD &amp; Flux     \u2022 Implement declarative CI/CD with GitOps tools like ArgoCD and Flux for continuous deployment.</li> <li>Serverless Kubernetes (Knative, OpenFaaS)     \u2022 Run event-driven serverless workloads on Kubernetes with Knative or OpenFaaS.</li> <li>Kubernetes API Extensions &amp; Webhooks     \u2022 Develop mutating and validating admission webhooks for custom automation and policy enforcement.</li> <li>Kubernetes Disaster Recovery &amp; Backup Strategies     \u2022 Implement Velero for backups, high availability etcd, and disaster recovery planning.</li> <li>Kubernetes Edge Computing (K3s, KubeEdge)     Deploy Kubernetes on lightweight edge devices with K3s or KubeEdge.</li> </ol>"},{"location":"learning/k8s/basic/","title":"Basic","text":"<ol> <li>Pod    Definition : The smallest and simplest Kubernetes object. A Pod represents a single instance of a running process in    your cluster.    Explanation : Pods encapsulate one or more containers, storage resources, a unique network IP, and options indicating    how to run each container.</li> <li>ReplicaSet    Definition : Ensures that a specified number of pod replicas are running at any given time.    Explanation : It maintains the desired number of Pods by creating or deleting them as needed.</li> <li>Deployment    Definition : Provides declarative updates for Pods and ReplicaSets.    Explanation : It's used to manage stateless applications, perform updates, rollbacks, and scaling in an organized and    controlled manner.</li> <li>StatefulSet    Definition : Manages the deployment and scaling of a set of Pods and provides guarantees about the ordering and    uniqueness of these Pods.    Explanation : Useful for stateful applications and workloads that require consistent and persistent storage, such as    databases.</li> <li>DaemonSet    Definition : Ensures that all (or some) nodes run a copy of a Pod.    Explanation : Used for deploying background tasks across all nodes, like log collection or monitoring agents.</li> <li>Job    Definition : Creates one or more Pods and ensures that a specified number of them successfully terminate.    Explanation : Suitable for batch processing tasks where each task must run to completion.</li> <li>CronJob    Definition : Used to run Jobs on a scheduled basis.    Explanation : Manages time-based tasks, similar to cron jobs in Unix/Linux systems.</li> <li>Service    Definition : An abstract way to expose an application running on a set of Pods as a network service.    Explanation : Services can provide load balancing and DNS capabilities for Pods.</li> <li>Ingress    Definition : Manages external access to services, typically HTTP.    Explanation : Routes external HTTP/S traffic to the appropriate services within the cluster.</li> <li>ConfigMap     Definition : Used to store configuration data in key-value pairs.     Explanation : Decouples configuration artifacts from image content to keep containerized applications portable.</li> <li>Secret     Definition : Similar to ConfigMaps but designed to hold confidential data such as passwords, OAuth tokens, and SSH     keys.     Explanation : Secrets are base64-encoded to provide a degree of protection and are used to manage sensitive     information.</li> <li>PersistentVolume (PV)     Definition : A piece of storage in the cluster that has been provisioned by an administrator or dynamically     provisioned using Storage Classes.     Explanation : Abstracts the details of how storage is provided.</li> <li>PersistentVolumeClaim (PVC)     Definition : A request for storage by a user.     Explanation : PVCs allow Pods to request specific amounts and types of storage.</li> <li>StorageClass     Definition : Provides a way to describe the \"classes\" of storage available in the cluster.     Explanation : Enables dynamic provisioning of storage resources.</li> <li>Namespace     Definition : Provides a mechanism to partition resources within a single Kubernetes cluster.     Explanation : Useful for organizing cluster resources and can be used to create multiple virtual clusters within a     physical cluster.</li> <li>NetworkPolicy     Definition : Controls network access to and from Pods.     Explanation : Used to define rules that specify what traffic is allowed to and from Pods.</li> <li>ResourceQuota     Definition : Defines resource limits for particular namespaces.     Explanation : Helps manage resources by limiting the total amount of resources a namespace can consume.</li> <li>LimitRange     Definition : Specifies default or minimum/maximum compute resource requirements for containers.     Explanation : Ensures that Pods consume resources within set limits, helping prevent resource starvation.</li> </ol>"},{"location":"learning/k8s/expert/","title":"Expert","text":"<p>For mastering Kubernetes internals, multi-cluster management, and performance tuning.</p> <ol> <li>Kubernetes API Internals &amp; etcd Deep Dive    \u2022 Understand the API server internals, request processing, API aggregation, and optimizing etcd performance.</li> <li>Multi-Cluster &amp; Hybrid Deployments    \u2022 Manage workloads across clusters using Federation (KubeFed), Cluster API, and hybrid solutions like Anthos.</li> <li>Custom Kubernetes Controllers &amp; Webhooks    \u2022 Build advanced Kubernetes controllers and admission webhooks for real-time automation and policy enforcement.</li> <li>Kubernetes Performance Optimization    \u2022 Tune Kubernetes for large-scale workloads by optimizing scheduling, node resource allocation, and API server    performance.</li> <li>Advanced Kubernetes Security    \u2022 Implement zero-trust security, encrypted communication, runtime security, and vulnerability scanning with tools    like Trivy and Falco.</li> <li>Kubernetes Edge Computing (K3s, KubeEdge, MicroK8s)    \u2022 Deploy Kubernetes at the edge with lightweight distributions like K3s and KubeEdge.</li> <li>Kubernetes-based Serverless Architectures (Knative, OpenFaaS)    \u2022 Build scalable, event-driven workloads using Knative or OpenFaaS on Kubernetes.</li> <li>Kubernetes Chaos Engineering (LitmusChaos, Chaos Mesh)    \u2022 Simulate failures and improve system resilience with chaos engineering tools.</li> <li>Kubernetes Debugging &amp; Troubleshooting at Scale    \u2022 Debug complex production issues using kubectl debugging tools, logs, and tracing techniques.</li> <li>Kubernetes for High Performance Computing (HPC)     Run AI/ML, GPU workloads, and large-scale computations efficiently in Kubernetes.</li> </ol>"},{"location":"projects/","title":"Every project will have","text":""},{"location":"projects/#structure","title":"Structure","text":""},{"location":"projects/#source-code","title":"Source code","text":"<p>python</p>"},{"location":"projects/#packaging","title":"Packaging","text":"<p>Docker container</p>"},{"location":"projects/#deployment-manifest","title":"Deployment manifest","text":"<p>helm chart</p>"},{"location":"projects/#infra","title":"Infra","text":"<p>terraform</p>"},{"location":"projects/#hosting","title":"Hosting","text":"<p>AWS</p>"},{"location":"projects/#lifecycle","title":"Lifecycle","text":""},{"location":"projects/#ci","title":"CI","text":"<ul> <li>use GitHub actions</li> <li>Static code analysis</li> <li>Dynamic code analysis</li> </ul>"},{"location":"projects/#cd","title":"CD","text":"<p>ArgoCD</p>"},{"location":"projects/#monitoring","title":"Monitoring","text":"<p>Prometheus with Grafana Cloudwatch dashboards</p>"},{"location":"projects/#alerting","title":"Alerting","text":"<p>slack</p>"},{"location":"projects/Project1-REST_Madness/","title":"Index","text":""},{"location":"projects/Project1-REST_Madness/#rest-madness","title":"REST Madness","text":"<p>This project will deploy a business model REST API CRUD service, and a client to call the service for testing integrity.</p> <p>Purpose of this project is to demonstrate auto-scaling capabilities for k8s deployment.</p> <p>Both service and client will be deployed as containers in K8S environment, while test client will increase it's call rate over time , making the service auto-scale accordingly.</p>"},{"location":"projects/Project1-REST_Madness/#service","title":"Service","text":"<p>python based CRUD microservice, exposing REST API.</p>"},{"location":"projects/Project1-REST_Madness/#methods","title":"Methods","text":"<ul> <li>ADD ONE</li> <li>GET ONE</li> <li>FIND ONE</li> <li>GET ALL</li> <li>UPDATE ONE</li> <li>DELETE ONE</li> </ul>"},{"location":"projects/Project1-REST_Madness/#service-notes","title":"Service notes","text":"<ul> <li> <p>Business model represented in Pydantic</p> </li> <li> <p>REST Methods represented in FastAPI</p> </li> <li> <p>http server uvicorn</p> </li> <li> <p>packaged as a slim Docker container</p> </li> </ul>"},{"location":"projects/Project1-REST_Madness/#client","title":"Client","text":"<p>Client will perform an acceptance test flow =&gt;</p>"},{"location":"projects/Project1-REST_Madness/#test-flow","title":"Test fLow","text":"<p>ADD -&gt; GET -&gt; FIND -&gt; UPDATE -&gt; GET -&gt; FIND -&gt; DELETE -&gt; GET -&gt; FIND</p>"},{"location":"projects/Project1-REST_Madness/#client-notes","title":"Client notes","text":"<p>Shared model with the service. Will asynchronously perform GET ALL to further increase the load.</p>"},{"location":"projects/Project1-REST_Madness/#model","title":"Model","text":""},{"location":"projects/Project1-REST_Madness/app/android_auto_client/","title":"Placeholder","text":""},{"location":"projects/Project1-REST_Madness/app/backend/","title":"Placeholder","text":""},{"location":"projects/Project1-REST_Madness/app/db/","title":"Placeholder","text":"<p>python -m pip install \"pymongo[srv]\"</p>"},{"location":"projects/Project1-REST_Madness/app/frontend/","title":"Placeholder","text":""},{"location":"projects/Project1-REST_Madness/infra/aws/","title":"Placeholder","text":""},{"location":"projects/Project1-REST_Madness/infra/cicd/","title":"Placeholder","text":""},{"location":"projects/Project1-REST_Madness/infra/k8s/","title":"Placeholder","text":""},{"location":"projects/Project2-CRossWord/","title":"Index","text":""},{"location":"projects/Project2-CRossWord/#aws-tech-involved","title":"AWS Tech involved","text":""},{"location":"projects/Project2-CRossWord/#-dynamodb","title":"- DynamoDB","text":""},{"location":"projects/Project2-CRossWord/#project-overview","title":"Project Overview","text":"<p>The Crossword Application is a multi-platform app designed for puzzle enthusiasts. It allows users to solve both thematic and standard crosswords while contributing by adding new words and riddles. The app will track user rankings based on solving speed and riddle creation activity.</p>"},{"location":"projects/Project2-CRossWord/#technology-stack","title":"Technology Stack","text":"<p>Frontend: Flutter (for cross-platform support)</p> <p>Backend: Python (FastAPI or Flask)</p> <p>Database: NoSQL (MongoDB, DynamoDB, or Firestore)</p> <p>Hosting &amp; Deployment: AWS + Kubernetes</p>"},{"location":"projects/Project2-CRossWord/#key-features","title":"Key Features","text":"<ol> <li>Crossword Gameplay</li> </ol> <p>Thematic and standard crosswords</p> <p>Intuitive and interactive solving experience</p> <ol> <li>User-Generated Content</li> </ol> <p>Users can add new words and corresponding riddles</p> <p>Multiple riddles per word with rating based on solving speed</p> <ol> <li>Ranking System</li> </ol> <p>User ranking based on solving speed</p> <p>Contribution ranking based on the number and quality of submitted riddles</p> <ol> <li>AI-Powered Features</li> </ol> <p>Automatic riddle generation using AI (OpenAI API or other NLP models)</p> <p>Difficulty rating based on past solving times</p> <p>Smart suggestions for new words and riddles</p>"},{"location":"projects/Project2-CRossWord/#system-architecture","title":"System Architecture","text":"<p>Frontend (Flutter)</p> <p>UI for crossword solving and user interactions</p> <p>API communication with the backend</p> <p>Backend (Python + FastAPI/Flask)</p> <p>Handles crossword logic and user interactions</p> <p>Provides REST API for the frontend</p> <p>Database (NoSQL - MongoDB/DynamoDB/Firestore)</p> <p>Stores words, riddles, and user rankings</p> <p>Ensures fast retrieval and updates</p>"},{"location":"projects/Project2-CRossWord/#hosting-deployment-aws-kubernetes","title":"Hosting &amp; Deployment (AWS + Kubernetes)","text":"<p>Scalable deployment</p> <p>Load balancing and high availability</p> <p>API Endpoints (Examples)</p> <ol> <li>User Authentication</li> </ol> <p>POST /api/auth/signup \u2013 Register new users</p> <p>POST /api/auth/login \u2013 Authenticate users</p> <ol> <li>Crossword Management</li> </ol> <p>GET /api/crosswords/{id} \u2013 Fetch a crossword puzzle</p> <p>POST /api/crosswords \u2013 Create a new crossword</p> <ol> <li>Riddle Management</li> </ol> <p>POST /api/riddles \u2013 Add a new riddle</p> <p>GET /api/riddles/{word} \u2013 Fetch riddles for a word</p> <ol> <li>User Rankings</li> </ol> <p>GET /api/rankings/solvers \u2013 Get top solvers</p> <p>GET /api/rankings/contributors \u2013 Get top contributors</p>"},{"location":"projects/Project2-CRossWord/#ai-integration","title":"AI Integration","text":"<p>Word Riddle Generation: Generate riddles for words using OpenAI API</p> <p>Difficulty Adjustment: AI-based ranking of riddle difficulty</p> <p>Smart Recommendations: Suggest words/riddles based on user activity</p> <p>Milestones &amp; Development Plan</p> <p>Phase 1: Planning &amp; Design</p> <p>Define database schema</p> <p>Set up API architecture</p> <p>Phase 2: Core Development</p> <p>Implement authentication</p> <p>Develop crossword and riddle APIs</p> <p>Create UI for solving and adding puzzles</p> <p>Phase 3: AI Features &amp; Enhancements</p> <p>Integrate AI for riddle generation</p> <p>Implement user ranking system</p> <p>Phase 4: Deployment &amp; Optimization</p> <p>Deploy to AWS Kubernetes</p> <p>Optimize performance and security</p> <p>Future Enhancements</p> <p>Multiplayer crosswords</p> <p>AI-powered crossword creation</p> <p>Advanced statistics and analytics for users</p> <p>Conclusion</p> <p>This project aims to provide an engaging and community-driven crossword experience with AI-enhanced features. By leveraging modern technology stacks, the app ensures scalability, efficiency, and an interactive puzzle-solving journey.</p>"},{"location":"projects/Project3/","title":"Placeholder","text":""}]}